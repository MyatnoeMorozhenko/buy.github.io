#BOT Name = Korean grandma
#https://t.me/koreangrandma_bot

import os

from aiogram import Bot, types
from aiogram.dispatcher import Dispatcher
from aiogram.utils import executor
from client_keyb import keyb_client
from client_keyb import keyb_client2
from client_keyb import keyb_client3
from client_keyb import keyb_client_set
from client_keyb import keyb_client_menu
from client_keyb import keyb_client_level1
from client_keyb import keyb_client_level1_back
import json
from parser.parser import check_news_updates
from dotenv import load_dotenv
from db import database as db
from aiogram.types.web_app_info import WebAppInfo
from aiogram.types import ReplyKeyboardMarkup


load_dotenv()
bot = Bot(os.getenv('TOKEN'))
dp = Dispatcher(bot=bot)


f = open('enterylevel/–£—Ä–æ–∫1.txt', encoding='utf-8')
u1 = f.read()
f.close()

fi = open('–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è', encoding='utf-8')
instruction = fi.read()
fi.close()

f2 = open('enterylevel/–£—Ä–æ–∫2', encoding='utf-8')
u2 = f2.read()
f2.close()

f3 = open('enterylevel/–£—Ä–æ–∫3', encoding='utf-8')
u3 = f3.read()
f3.close()

f4 = open('enterylevel/–£—Ä–æ–∫4', encoding='utf-8')
u4 = f4.read()
f4.close()

f5 = open('enterylevel/–£—Ä–æ–∫5', encoding='utf-8')
u5 = f5.read()
f5.close()

#–î–∞—Ç–∞ –±–∞–∑–∞

async def on_startup(_):
    await db.db_start()
    print('–ë–∞–∑–∞ —Å–æ–∑–¥–∞–Ω–∞!')

@dp.message_handler(commands=['start'])
async def command_start(msg: types.Message):
    await db.cmd_start_db(msg.from_user.id)
    """await db.cmd_start_db_name(msg.from_user.username)"""
    await bot.send_message(msg.from_user.id,
                           f'–ü—Ä–∏–≤–µ—Ç,{msg.from_user.full_name}! –≠—Ç–æ –±–æ—Ç –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è –∫–æ—Ä–µ–π—Å–∫–æ–≥–æ —è–∑—ã–∫–∞. –î–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –æ–±—É—á–µ–Ω–∏—é –Ω–∞–∂–º–∏ "–ú–µ–Ω—é —É—Ä–æ–∫–æ–≤".',
                           reply_markup=keyb_client)


@dp.message_handler(commands=['menu'])
async def command_start(msg: types.Message):
    await bot.send_message(msg.from_user.id, '–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.', reply_markup=keyb_client)


#–î–æ–º–∞—à–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è
photo = open('/Users/alenaagafonova/PycharmProjects/?Korean/db/sejong1.png', 'rb')


@dp.callback_query_handler(lambda call: call.data == 'button6')
async def command_start(call):
    await bot.send_photo(call.from_user.id,
                         caption='<b>–ó–∞–¥–∞–Ω–∏–µ 1</b>\n–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å–≤–∏–∏ —Å –ø—Ä–∏–º–µ—Ä–æ–º. –ú–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –≤ —Ç–µ—Ç—Ä–∞–¥–∏ –∏–ª–∏ –∂–µ –ø–æ–ø—Ä–∞–∫—Ç–∏–∫–æ–≤–∞—Ç—å—Å—è –≤ —Å–æ—á–µ—Ç–∞–Ω–∏–∏ –∫–ª–∞–≤–∏—à –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ.',
                         parse_mode='HTML', photo=photo)


@dp.callback_query_handler(lambda c: True)
async def settings(callback_query: types.CallbackQuery):
    # await bot.edit_message_text(callback_query.chat.id, message.id = callback_query.msg.id, text = 'ghg', reply_markup = keyb_client2)
    # await callback_query.message.edit_reply_markup(reply_markup=keyb_client_set)
    if callback_query.data == 'button1':
        await callback_query.message.edit_text(
            '–ö—Ä—É—Ç–æ, —á—Ç–æ —Ç—ã —Å –Ω–∞–º–∏ ü§ó –í—Å–µ —É—Ä–æ–∫–∏ –ø–æ –ø–µ—Ä–≤–æ–º—É –Ω–∞—á–∏–Ω–∞—é—â–µ–º—É —É—Ä–æ–≤–Ω—é, –≤—ã–±–∏—Ä–∞–π —É—Ä–æ–∫ –∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è ‚¨á',
            reply_markup=keyb_client_menu)
    elif callback_query.data == 'beginer':
        await callback_query.message.edit_text(
            '–ó–¥–µ—Å—å —Ç—ã –Ω–∞–π–¥–µ—à—å –≤—Å–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ —Ç–µ–±–µ –ø–æ–Ω–∞–¥–æ–±—è—Ç—Å—è –≤–æ –≤—Ä–µ–º—è –æ–±—É—á–µ–Ω–∏—è.', reply_markup=keyb_client2)
    elif callback_query.data == 'urok1':
        await callback_query.message.edit_text(u1, reply_markup=keyb_client3)
    elif callback_query.data == 'urok2':
        await callback_query.message.edit_text(u2, reply_markup=keyb_client3)
    elif callback_query.data == 'urok3':
        await callback_query.message.edit_text(u3, reply_markup=keyb_client3)
    elif callback_query.data == 'urok4':
        await callback_query.message.edit_text(u4, reply_markup=keyb_client3)
    elif callback_query.data == 'urok5':
        await callback_query.message.edit_text(u5, reply_markup=keyb_client3)
    elif callback_query.data == 'button2':
        await callback_query.message.edit_text('–í –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–º–µ–Ω—è—Ç—å —è–∑—ã–∫.', reply_markup=keyb_client_set)
    elif callback_query.data == 'button5':
        await callback_query.message.edit_text(instruction, reply_markup=keyb_client_menu)
    elif callback_query.data == 'back_to_back':
        await callback_query.message.edit_text(
            '–ó–¥–µ—Å—å —Ç—ã –Ω–∞–π–¥–µ—à—å –≤—Å–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ —Ç–µ–±–µ –ø–æ–Ω–∞–¥–æ–±—è—Ç—Å—è –≤–æ –≤—Ä–µ–º—è –æ–±—É—á–µ–Ω–∏—è.',
            reply_markup=keyb_client_menu)
    elif callback_query.data == 'back':
        await callback_query.message.edit_text('–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª.',
                                               reply_markup=keyb_client)
    elif callback_query.data == 'back_to_back01':
        await callback_query.message.edit_text(
            '–ó–¥–µ—Å—å —Ç—ã –Ω–∞–π–¥–µ—à—å –≤—Å–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ —Ç–µ–±–µ –ø–æ–Ω–∞–¥–æ–±—è—Ç—Å—è –≤–æ –≤—Ä–µ–º—è –æ–±—É—á–µ–Ω–∏—è.', reply_markup=keyb_client2)
    elif callback_query.data == 'beginer1':
        await callback_query.message.edit_text(
            "–ü—Ä–µ–∂–¥–µ —á–µ–º –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç—å –∫ –ø–µ—Ä–≤–æ–º—É —É—Ä–æ–≤–Ω—é, —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –≤–≤–æ–¥–Ω—ã–º –∫—É—Ä—Å–æ–º.\n\n–ó–¥–µ—Å—å —Å–æ–±—Ä–∞–Ω—ã —É—Ä–æ–∫–∏ –ø–æ —É—á–µ–±–Ω–∏–∫—É Sejong Korean.",
            reply_markup=keyb_client_level1)
    elif callback_query.data == 'urok_l1':
        await callback_query.message.edit_text("test", reply_markup=keyb_client_level1_back)
    elif callback_query.data == 'urok_l2':
        await callback_query.message.edit_text("test", reply_markup=keyb_client_level1_back)
    elif callback_query.data == 'back_to_back_l1':
        await callback_query.message.edit_text("...", reply_markup=keyb_client_level1)


# –ü–∞—Ä—Å–µ—Ä

@dp.message_handler(commands=['get_freshnews_rus'])
async def get_all_news(message: types.Message, parse_mode='HTML'):
    fresh_news = check_news_updates()
    if len(fresh_news) >= 1:
        for k, v in sorted(fresh_news.items()):
            news = f"<b>{v['article_time']}</b>\n" \
                   f"{v['article_title']}\n\n" \
                   f"{v['article_url']}\n"

            await message.answer(news, parse_mode='HTML')
    else:
        await message.answer(
            '–°–≤–µ–∂–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –ø–æ–∫–∞ –Ω–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å –∫–æ–º–∞–Ω–¥—É —á–µ—Ä–µ–∑ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è, –≤–æ–∑–º–æ–∂–Ω–æ, –Ω–æ–≤–æ—Å—Ç–∏ –ø–æ—è–≤—è—Ç—Å—è.')


@dp.message_handler(commands=['get_news_rus'])
async def get_all_news(message: types.Message):
    with open('news_dict.json') as file:
        news_dict = json.load(file)

    for k, v in sorted(news_dict.items())[-3:]:
        news = f"<b>{v['article_time']}</b>\n" \
               f"{v['article_title']}\n\n" \
               f"{v['article_url']}\n"

        await message.answer(news, parse_mode='HTML')

#–•—ç–Ω–¥–ª–µ—Ä –≤–µ–± –∞–ø–ø–∞ (–ø—Ä–∏–∫–æ–ª—å–Ω–æ, –ø—É—Å—Ç—å –±—É–¥–µ—Ç —Ç–∞–∫)

@dp.message_handler(commands=['buy'])
async def buy(msg: types.Message):
    button_buy = ReplyKeyboardMarkup(resize_keyboard=True)
    button_buy.add(types.KeyboardButton('–û—Ç–∫—Ä—ã—Ç—å –≤–µ–± —Å—Ç—Ä–∞–Ω–∏—Ü—É', web_app=WebAppInfo(url = 'https://replit.com/@AALLEENA/Koreangrandi#index.html')))
    await msg.answer('–¢—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –æ–ø–ª–∞—Ç—ã –∫—É—Ä—Å–∞. –ú–æ–∂–µ—à—å –≤—ã–±—Ä–∞—Ç—å –ø–æ–¥—Ö–æ–¥—è—â–∏–π –∏ –æ–ø–ª–∞—Ç–∏—Ç—å.', reply_markup=button_buy)


if __name__ == '__main__':
    executor.start_polling(dp, on_startup = on_startup, skip_updates=True)

"""requests.post(f'{url}{bot}/', json={'method': 'SendMessage', 'chat_id': f'{user_id}', 'text': 'something','reply_markup': ['keyboard': [[{'text': 'Yes'}, {'text': 'NO'}]], 'resize_keyboard': True)))"""


### –î–û–ú–ê–®–ù–ï–ï –ó–ê–î–ê–ù–ò–ï –ù–û–ú–ï–† 2:
""""

def get_Updates():
    count_message = 0
    while True:
        response = requests.get(f'{url}{TOKEN}/getUpdates').json()
        if count_message != len(response['result']):
            count_message = len(response['result'])
            message = response['result'][-1]
            file_id = message['message']['photo'][-1]['file_id']
            user_id = message['message']['from']['id']
            user_name = message['message']['from']['username']
            requests.get(f'{url}{TOKEN}/sendMessage?chat_id={user_id}&text=–ü—Ä–∏–≤–µ—Ç,{user_name}.–ü—Ä–∏—à–ª–∏ –º–Ω–µ —Ñ–æ—Ç–æ, –∏ —è –æ—Ç–ø—Ä–∞–≤–ª—é –µ–≥–æ –≤ –æ—Ç–≤–µ—Ç.')
            requests.get(f'{url}{TOKEN}/sendPhoto?chat_id={user_id}&photo={file_id}')

get_Updates()
"""

"""with open("sejong.txt", 'rb') as f:

    first_part = f.read(1290)
    second_part = f.readlines()[23::53]
    f.seek(3400)
    third_part = f.read(2338)
    #f.seek()
    #forth_part = f.read(3383)
    #f.seek()
    #fifth_part = f.read(3383)"""


"""""
@dp.callback_query_handler(lambda c: c.data == 'button1')
async def process_callback_button1(callback_query: types.CallbackQuery):
    #await bot.answer_callback_query(callback_query.id)
    await callback_query.message.edit_text('–ö—Ä—É—Ç–æ, —á—Ç–æ —Ç—ã —Å –Ω–∞–º–∏ ü§ó –í—Å–µ —É—Ä–æ–∫–∏ –ø–æ –ø–µ—Ä–≤–æ–º—É –Ω–∞—á–∏–Ω–∞—é—â–µ–º—É —É—Ä–æ–≤–Ω—é, –≤—ã–±–∏—Ä–∞–π —É—Ä–æ–∫ –∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è ‚¨á', reply_markup = keyb_client_menu)

@dp.message_handler(text=['–ú–µ–Ω—é —É—Ä–æ–∫–æ–≤'])
async def hello_message(msg: types.Message):
   await bot.send_message(msg.from_user.id, "–ù–∏–∂–µ —Ä–∞–∑–¥–µ–ª —Å–æ –≤—Å–µ–º–∏ —É—Ä–æ–∫–∞–º–∏:", reply_markup = keyb_client2)

@dp.message_handler(text=['–í–≤–æ–¥–Ω—ã–π –∫—É—Ä—Å'])
async def lesson_message(msg: types.Message):
    await bot.send_message(msg.from_user.id, '–ó–¥–µ—Å—å —Ç—ã –Ω–∞–π–¥–µ—à—å –≤—Å–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ —Ç–µ–±–µ –ø–æ–Ω–∞–¥–æ–±—è—Ç—Å—è –≤–æ –≤—Ä–µ–º—è –æ–±—É—á–µ–Ω–∏—è.', reply_markup=keyb_client3)

@dp.callback_query_handler(lambda c: c.data == 'beginer')
async def process_callback_button1(callback_query: types.CallbackQuery):
    #await bot.answer_callback_query(callback_query.id)
    await callback_query.message.edit_text('–ó–¥–µ—Å—å —Ç—ã –Ω–∞–π–¥–µ—à—å –≤—Å–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ —Ç–µ–±–µ –ø–æ–Ω–∞–¥–æ–±—è—Ç—Å—è –≤–æ –≤—Ä–µ–º—è –æ–±—É—á–µ–Ω–∏—è.', reply_markup = keyb_client2)

@dp.message_handler(text=['üî†–ì—Ä–∞–º–º–∞—Ç–∏–∫–∞'])
async def lesson_message(msg: types.Message):
    await bot.send_message(msg.from_user.id, grammar.read(),reply_markup=keyb_client3)

@dp.callback_query_handler(lambda c: c.data == 'button9')
async def settings(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id, grammar.read())

#–•–≠–ù–î–õ–ï–†–´ –î–õ–Ø –£–†–û–ö–û–í

@dp.message_handler(text=['–£—Ä–æ–∫ 1'])
async def lesson_message(msg: types.Message):
    await bot.send_message(msg.from_user.id, first_part,reply_markup=keyb_client3)

@dp.callback_query_handler(lambda c: c.data == 'urok1')
async def process_callback_button1(callback_query: types.CallbackQuery):
    #await bot.answer_callback_query(callback_query.id)
    await callback_query.message.edit_text(f.read(), reply_markup = keyb_client3)
    #await bot.send_message(callback_query.from_user.id, f.read(), reply_markup = keyb_client3)

@dp.message_handler(text=['–£—Ä–æ–∫ 2'])
async def lesson_message(msg: types.Message):
    await bot.send_message(msg.from_user.id, second_part,reply_markup=keyb_client3)

@dp.message_handler(text=['–£—Ä–æ–∫ 3'])
async def lesson_message(msg: types.Message):
    await bot.send_message(msg.from_user.id, third_part,reply_markup=keyb_client3)
"""""


""""@dp.callback_query_handler(lambda c: c.data == 'back')
async def process_callback_button1(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id, '–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª.', reply_markup = keyb_client)

@dp.message_handler(text=['‚öôÔ∏è–ù–∞—Å—Ç—Ä–æ–π–∫–∏'])
async def lesson_message(msg: types.Message):
   await bot.send_message(msg.from_user.id, '‚öôÔ∏è–ù–∞—Å—Ç—Ä–æ–π–∫–∏', reply_markup=keyb_client_set)


def pulling():
    count_message = 0
    while True:
        response = requests.get(f'{url}{bot}/getUpdates').json()
        if count_message != len(response['result']):
            count_message = len(response['result'])
            message = response['result'][-1]
            file_id = message['message']['photo'][-1]['file_id']
            caption = message['message']['caption']
            user_id = message['message']['from']['id']
            requests.get(f'{url}{bot}/sendPhoto?chat_id={user_id}&photo={file_id}&caption={caption}')
"""

